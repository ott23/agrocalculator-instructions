REST запрос на расчёт технологической операции:

Запрос выполняется на адрес сервера с Spring клиентом (в настоящий момент из внутрисети http://10.242.44.55/api/send, из внешки http://77.93.126.226:33080/api/send).

Запрос имеет следующую структуру:
topicId - тип расчёта (для расчёта техонологической операции всегда operation-tasks);
clientId - идентификатор клиента (у каждого свой);
taskId - индентификатор расчёта (генерируется и хранится у клиента - по нему можно найти операцию в кафке);
operationId - идентификатор технологической операции в БД;
geofenceId - иднтификатор геозоны в БД;
workId - идентификатор работы в БД;
objectId - идентификатор объекта в БД;
objectWidth - ширина прицепного в метрах;
object Shift - смещение датчика относительно центра в метрах с плавающей запятой (больше нуля - вправо, меньше нуля - влево);
dateFrom - UNIX-время начало работы в секундах;
dateTo - UNIX-время окончания работы в секундах.

{
    "topicId": "operation-tasks",
    "clientId": "testClient",
    "taskId": "13309423389",
    "operationId": 589202673,
    "geofenceId": 38985,

    [
        {
            "workId": 148970,
            "objectId": 5946,
            "objectWidth": 9,
            "objectShift": 0,
            "dateFrom": 1503447587,
            "dateTo": 1503499982
        },
        {
            "workId": 148980,
            "objectId": 5948,
            "objectWidth": 9,
            "objectShift": 0,
            "dateFrom": 1503475594,
            "dateTo": 1503500073
        }
    ]
}

REST запрос на получение всех непрочитанных расчётов по конкретному клиенту:

Запрос выполняется на адрес сервера с Spring клиентом (в настоящий момент из внутрисети http://10.242.44.55/api/poll, из внешки http://77.93.126.226:33080/api/poll).

Запрос имеет следующую структуру:
clientId - идентификатор клиента (у каждого свой).

{
    "clientId": "testClient"
}

Ответ имеет следующую стуктуру:
size - количество посчитанных задач в ответе;
response - массив посчитанных задач;

Массив имеет следующий состав:
operationId - идентификатор операции;
commonGeometry - общая геометрия работы в GeoJSON;
commonArea - общая посчитанная площадь в гектарах;
works - массив данных по отдельным работам;

Массив данных по отдельным работам имеет следующий состав:
workId - идентификатор работы;
treatedArea - площадь "эффективной" работы;
wholeArea - вся обработанная площадь;
wholeGeometry - вся обработанная геометрия.


Кроме того в системе имеется ряд настроек (задаются из переменных окружения (при наличии), в противном случае из файла конфигурации): 

tn.kafka.bootstrap-servers = 10.242.44.55:9093 (список кафка брокеров)
tn.kafka.group-id = calculators (группа калькуляторов)
tn.kafka.poll-timeout = 1000 (милисекунды, таймаут на чтение - иначе ошибка кафки)
tn.kafka.send-timeout = 5000 (милисекунды, таймаут на отправку - иначе ошибка кафки)
tn.kafka.test-timeout = 2000 (милисекунды, таймаут на тестирование соединения - при отсутствии хотя бы одного доступного кафка брокера ошибка)
tn.kafka.tasks-topics = length-tasks, operation-tasks (перечень топиков на чтение задач)
tn.kafka.results-topic-prefix = results- (префикс топика результатов - имеет вид results-"имя клиента, поставившего задачу", например, results-testClient)

tn.pool.max-count = 2 (максимальное количество параллельно решаемых задач на узле)
tn.pool.timeout = 100 (милисекунды, периодичность опроса кафки при наличии мест в очереди задач)

tn.rest.url = http://agro.tn-group.net/ws_agrocultura/v1/api1 (адрес REST сервиса для получения геоданных).






{"response":[{"taskId":"13309423389","error":null}],"size":1}
